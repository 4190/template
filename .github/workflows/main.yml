# This workflow is configured to run on a self-hosted runner.
# It builds a .NET, Java, and Angular application, pushes them to Docker Hub,
# and deploys them to the local Kubernetes cluster on the same server.

name: Build and Deploy Full Stack Application (Self-Hosted)

on:
  push:
    branches: [ "master" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-deploy:
    # This now targets your self-hosted runner
    runs-on: self-hosted

    steps:
      # Step 1: Check out your repository code
      # This will check out the code into the runner's working directory on your server.
      - name: Checkout repository
        uses: actions/checkout@v4

      # NOTE: The setup steps for Java, .NET, and Node.js are removed.
      # It is expected that these are already installed on your self-hosted runner machine
      # as part of the setup process outlined in the guide.

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # --- .NET Application CI/CD ---
      - name: Restore .NET dependencies
        run: dotnet restore Template
        
      - name: Build .NET project
        run: dotnet build --no-restore Template
        
      - name: Build and push .NET Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Template
          file: ./Template/Template/Dockerfile
          push: true
          tags: michalkrupka77/template:latest

      # --- Java Application CI/CD ---
      - name: Make mvnw executable
        run: chmod +x ./mvnw
        working-directory: ./java-1

      - name: Build Java project with Maven
        run: ./mvnw clean package
        working-directory: ./java-1

      - name: Build and push Java Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./java-1
          push: true
          tags: michalkrupka77/java-1:latest

      # --- Angular Application CI/CD ---
      - name: Install Angular dependencies
        run: npm ci
        working-directory: ./angular-1

      - name: Build Angular project
        run: npm run build
        working-directory: ./angular-1

      - name: Build and push Angular Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./angular-1
          push: true
          tags: michalkrupka77/angular-1:latest

      # --- Kubernetes Deployment ---
      # NOTE: The kubeconfig setup step is removed. The runner uses the local kubectl
      # on the server, which is already configured to access the K3s cluster.
      - name: Apply Kubernetes manifests
        # Use 'sudo' because the k3s kubectl command requires root privileges.
        run: sudo kubectl apply -f K8S/Deploy

      - name: Rollout restart deployments
        run: |
          sudo kubectl rollout restart deployment template-depl
          sudo kubectl rollout restart deployment java-1-depl
          sudo kubectl rollout restart deployment angular-frontend-depl

